//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity boardManagerEntity { get { return GetGroup(GameMatcher.BoardManager).GetSingleEntity(); } }
    public BoardManager boardManager { get { return boardManagerEntity.boardManager; } }
    public bool hasBoardManager { get { return boardManagerEntity != null; } }

    public GameEntity SetBoardManager(GameEntity[,] newEntities) {
        if (hasBoardManager) {
            throw new Entitas.EntitasException("Could not set BoardManager!\n" + this + " already has an entity with BoardManager!",
                "You should check if the context already has a boardManagerEntity before setting it or use context.ReplaceBoardManager().");
        }
        var entity = CreateEntity();
        entity.AddBoardManager(newEntities);
        return entity;
    }

    public void ReplaceBoardManager(GameEntity[,] newEntities) {
        var entity = boardManagerEntity;
        if (entity == null) {
            entity = SetBoardManager(newEntities);
        } else {
            entity.ReplaceBoardManager(newEntities);
        }
    }

    public void RemoveBoardManager() {
        boardManagerEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public BoardManager boardManager { get { return (BoardManager)GetComponent(GameComponentsLookup.BoardManager); } }
    public bool hasBoardManager { get { return HasComponent(GameComponentsLookup.BoardManager); } }

    public void AddBoardManager(GameEntity[,] newEntities) {
        var index = GameComponentsLookup.BoardManager;
        var component = (BoardManager)CreateComponent(index, typeof(BoardManager));
        component.entities = newEntities;
        AddComponent(index, component);
    }

    public void ReplaceBoardManager(GameEntity[,] newEntities) {
        var index = GameComponentsLookup.BoardManager;
        var component = (BoardManager)CreateComponent(index, typeof(BoardManager));
        component.entities = newEntities;
        ReplaceComponent(index, component);
    }

    public void RemoveBoardManager() {
        RemoveComponent(GameComponentsLookup.BoardManager);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherBoardManager;

    public static Entitas.IMatcher<GameEntity> BoardManager {
        get {
            if (_matcherBoardManager == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.BoardManager);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherBoardManager = matcher;
            }

            return _matcherBoardManager;
        }
    }
}
